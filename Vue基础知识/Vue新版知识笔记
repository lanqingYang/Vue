(2020-11-25)
    1. 概述
        .1 vue是js框架
        .2 简化om操作
        .3 响应式数据驱动

    2.  el:挂载点 
        .1 Vue会管理el选项命中的元素机器 内部的 后代元素
        .2 body和html元素不可被挂载
        .3 最好使用id选择器，其他选择器也可以
        .4 el用来设置Vue实例管理(挂载)的元素

本地应用(实例：01、02、03)
    3. vue指令
        v-lock指令: 
        .1 提供样式 [v-cloak]{display :none}
        .2 在插值表达式所在的标签中添加v-vloak指令

        v-pre 
        v-once

        原理:先通过样式隐藏内容,然后再在内存中进行值的替换,替换好之后再显示最终结果(就不会出现刷新会显示{{}} 的情况) 

        (01计数器)
        v-text： 设置标签的内容，默认写法会替换全部内容，使用插值表达式{{}}可以替换指定内容，内部支持写表达式
        v-html： 设置元素的innerHTML，可以解析data中的html结构的内容，其他同v-text
        v-on：   为元素绑定事件 v-on:事件名='方法'  简便：@事件名   
             v-on:click  == @click
             补充：传递自定义参数，事件修饰符  @keyup.enter='sayHi(name)' //按下回车触发函数
    
        (02图片切换)
        v-show: 根据表达值的真假，切换元素的显示和隐藏，本质是切换元素的display，指令后的内容最终解析为布尔值
        v-if: 基本同v-show，区别: 操纵dom树，移除或添加dom树，v-show消耗性能更小
        v-bind： 设置元素属性(src,title,class...) 简写 :class、:title...

        (03记事本)
        v-for: 根据数据生成列表结构，常与数组结合使用，语法(item,index) in 数据（arr）,长度的更新是响应式的
        v-model: 双向数据绑定（获取和设置表单元素的值） 改变v-model='message' ,文本改变 data中的message值改变，data中的message值改变，v-model绑定值也改变
            绑定的数据会和表单元素值相关联


        样式绑定相关语法细节:(07)
          .1对象绑定和数组绑定可以结合使用
          .2class绑定的值可以简化操作
          .3默认的class如何处理? 会保留

Vue网络应用 axios+vue
    4. axios 网络请求库
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    语法规则:
     .1 get:
        axios.get('/user?ID=12345')
        .then(function (response) {
            console.log(response);
        })
        .catch(function (error) {
            console.log(error);
        });

    或者.then(func(data){},func(err){}) //第一个回调函数是成功触发,第二个失败触发

        上面的请求也可以这样做
        axios.get('/user', {
            params: {
            ID: 12345
            }
        })
        ...(下面相同)

    .2 post:
        axios.post('/user', {
            firstName: 'Fred',
            lastName: 'Flintstone'
            })
        ...(下面相同)

    .3 多个并发
        axios.all([getUserAccount(), getUserPermissions()])
            .then(axios.spread(function (acct, perms) {
            // 两个请求现在都执行完成
        }));

    .4 通过向 axios 传递相关配置来创建请求
        // 发送 POST 请求
            axios({
                method: 'post',
                url: '/user/12345',
                data: {
                    firstName: 'Fred',
                    lastName: 'Flintstone'
                    }
            });     

    .5注意事项:
     利用post,传参,是传递的json格式,在服务器中需要导入(body-parse模块)设置
     app.use(bodyParser.json()),才能在req.boyd中拿到值

       使用bodyParser.urlencoded({ extended: false }),使node后台支持了第一种请求体. application/x-www-form-urlencoded : name=zhagnsan&age=20
       使用bodyParser.json(),使node后台支持了第二种请求体.application/json         :{name:'zhagnsan',age=20}
       !! (内部实现机制: 对所有请求调用bodyParser.urlencoded({ extended:false })对请求进行处理,
        // ps:  extended:false false,表示利用queryString系统模块对参数的值进行处理;
        //  true用另一个第三方模块QS来处理参数(更强大,但目前可以不用)
        //   ..1检测当前请求中是否包含了请求参数,包含则接收,并将请求参数转换成对象类型
        //   ..2为req这个参数添加一个body属性,将请求参数的值赋给了req.body属性

Vue常用特性
    5. 表单操作 v-model (03)
        表单域修饰符: number:转换为数值.
                     trim:去掉空格(两端的)
                     lazy: 将input事件转换为change事件

    6. 自定义指令 directive/directives (04!!)
        //注意增加的指令名字可以首字母大写，但是其他字母不能大写!!
       ` 全局定义: Vue.directive('focus',{
                        inserted:function(el){
                            //获取元素的焦点
                            el.focus()
                        }
                    })
            在标签中使用 v-focus
        当然也支持局部定义 具体看09-01的例子
        `带参数的自定义指令 
              v-simple="{color:'green',text:'没有钩子函数的小练习,利用bingding对象的value值获取文本和更改颜色'}"

    .3计算属性(05) computed
       与方法的区别: 计算属性是基于他们的依赖进行缓存的,方法不存在缓存

(2020-11-30)
    7. 过滤器 filter(07)
        格式化数据,比如将字符串格式转化为首字符大写,将日期格式化为指定格式等
        注意:
            全局:Vue.filter('过滤器名称',function(val){//处理逻辑})
            局部:
                filters: {
                //名称，规则(实现逻辑)
                upper1: function (val) {
                return val.charAt(0).toUpperCase() + val.slice(1);
                },
            },
            }


        使用: (插值表达式\属性绑定)
            <div>{{msg | upper1}}</div>
            <div>{{msg | upper | lower}}</div>
            <div :abc="msg| upper">></div>

            可以带参数: <div>格式化后的时间{{date| format('yyyy-MM-dd')}}</div>
            在处理逻辑中:function(val,arg1,arg2..) 'yyyy-MM-dd'对应arg1参数


    8. 侦听器(06) watch
        数据变化时,执行异步或开销较大的操作使用
        数据一旦发生变化,就执行侦听器所绑定的方法

    9. 生命周期
      .1 挂载(初始化相关属性)
            ..1 beforeCreate 数据观测和事件配置前
            ..2 created ! 在实例创建完后被立即调用
            ..3 beforeMount 挂载前
            ..4 mounted !! 
                一旦被触发,就代表初始化完成,页面中模板的内容就已经存在了,就可以向里面填充数据.
                (才能向{{message}}中填充数据)

      .2 更新(元素或组件的更变操作)
            ..1 beforeUpdate 更新时,,发生在虚拟DOM打补丁前
            ..2 updated        由于数据更改导致的虚拟DOM重新渲染打补丁,在这之后调用

      .3 销毁(销毁相关属性)
            ..1 beforeDestroy 销毁前
            ..2 destroyed     销毁后

vue中数组
    10. 数组
        变异方法: 改变原始数组
         push,unshift,pop,shift,sort,reverse, splice(开始位置,删除个数)删除
        非变异方法: 不改变原数组 返回一个新数组
         filter,concat,  slice(begin,end)截取

        数组响应式变化:
            通过Vue.set(vm.items,indexOfItem,newValue)  数组名称、索引、要处理的数组的值
            vm.$set(vm.items,indexOfItem,newValue) 
            这俩既可以处理数组的索引，也可以处理对象的属性，并且都是响应式的 作用相同

            用索引的方式修改数据不是响应式的
                 vm.list[1] = "lemon"; //不会进行响应式改变,不能直接改页面值不会刷新（但是后台值会改变）
            响应式:vm.$set(vm.list, 1, "lemon");
            对对象: vm.$set(vm.info, "gender", "female");
                    Vue.set(vm.info, "interst", "sing");


Vue组件化开发
    目标:
        .1 知道组件化开发的思想
        .2 组件的注册方式
        .3 组件之间的数据交互方式
        .4 组件插槽的用法
        .5 Vue调试工具的用法
        .6 基于组件的方式实现业务功能


    11.组件
        (.1-.4 : 10-01)
        .1 当一个组件被定义， data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。
           如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！
           通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。

        .2 Vue.component('组件名称',{data:function(){return {}},template:``,methods:{}...})
           data必须是一个函数,原因见上

        .3 组件的模板内容必须是单个根元素  (组件模板可以是模板字符串)
            比如一个button.一个div 不能多个. 最外层不能有兄弟关系的标签
            但可以是父子关系
            <div><button></button><button></button><div>
        
        .4 组件命名方式
            `短横线 my-component
            `驼峰   MyComponent  要用到普通标签里面（html中）而不是template里面,就必须写成短横线式 <my-component>,规则:首字母小写,单词间-隔开
                                在template中用<MyComponent>没有问题

        .5 局部组件(10-02)
            局部组件只能在注册他的父组件中使用(注意 自定义指令和自定义过滤器也是这样的)

            var ComponentA={data:function(){return { } },template:``}
            (实例对象中vm) components:{'component-a':ComponentA}

        .6 补充 ： :is属性 指定那个组件就显示那个组件


组件间数据交互
        12. 父组件向子组件传值(11-01)
            .1 方式 
            父组件向子组件传值 :组件内部 props:['传递过来的值']  接收
            方式一: <menu-item title='来自父组件的值'></menu-item>  //静态方式,写死的值
            方式二: <menu-item title='来自父组件的值'></menu-item>  //动态方式,进行属性的绑定

            props属性名规则: `在props中使用驼峰形式,模板中需要使用短横线形式
                        `字符串形式的模板中没有这个限制
            举例: Vue.component('menu-item',{
                    props:[menuTitle],
                    template:`<div>{{menuTitle}}</div>`
                })
               
            在html中: <menu-item menu-title='你好'></menu-item> 


            .2 props 属性值类型(11-02)
               静态方式,传递的就是字符串, 动态绑定,可以传值的类型有 string,number,boolean,array,obj
                传递数据原则:单向数据流(只允许父亲向孩子传递)
                        
        13.子组件向父组件传值(11-03)
            通过自定义事件来传值,
            简单理解: 子组件触发事件 ($emit='事件名'),父组件逻辑处理(v-on:事件名='handle').  这里事件名要相同
            

            $event??怎么用

(2020-12-1)
        14.非父子组件间传值
                            事件中心
                 (触发/监听)         (触发/监听 ) 
            组件A                             组件B

            事件中心： var eventHub=new Vue()
            监听： eventHub.$on('自定义事件名称'，函数)
            销毁： eventHub.$off('自定义事件名称')
            触发事件：eventHub.$emit('自定义事件名称'，arg1...)
        
        15.组件插槽
            .1普通组件插槽(12-01)
             作用：父组件向子组件传递内容
             <alert-box>sayHi</alert-box>  父组件中有值， 值会传递到子组件中的模板的<slot></slot>标签中

            .2具名插槽(12-01)
             根据名字进行匹配，没有匹配的根据默认的内容显示，要有slot标签，父组件中内容才会有显示的地方且要对应slot的名字
             (一个插槽中想要填充多个内容)利用template标签，可以简化写法。 template标签不会显示到DOM树上，检查中不会存在 通过在template标签中设定 v-slot='名称' 显示对应的内容

            .3作用域插槽(12-02 看例子理解把)
              应用场景：父组件对子组件的内容进行加工处理
              v-slot：default='' 可以简写为 #default=''


----------任务列表(12)为分割线-- 12之前用app.js服务器--之后用app1.js-----

Vue前后端交互
        .1 前后端交互模式
        .2 promise 
        .3 fetch进行接口调用
        .4 axios接口调用
        .5 async/await方式调用接口

        16.交互模式
          .1 接口调用方式
             ..1 原生ajax
             ..2 基于jQuery的ajax (jQuery主要是进行DOM操作，Vue很少涉及到DOM操作)
             ..3 fetch
             ..4 axios

        .2 url 地址
        普通url地址 ： 协议://域名或ip地址:端口/path?参数#锚点
        Restful形式的URL：
        GET 查询,POST 添加 ,PUT 修改 ,DELETE 删除
        符合规则的： (传参方式 /参数)
        http：//www.hello.com/books               GET,POST
        http：//www.hello.com/books/123           PUT,DELETE


        17.promise(13)
            .1异步调用： 定时任务、Ajax、事件函数
            resolve和reject两个参数用于处理成功共和失败两种情况，并通过p.then/.catch获取处理结果

            .2 then中函数的返回值
              promise实例对象：则该实例对象会调用下一个then
              普通值： 返回的普通值会直接传递给下一个then，通过then参数中函数的参数接收该值
                     （默认返回resolve状态的promise对象！！！）
            
            .3 实例方法
             .then() .catch()获取异常信息 .finally()是否成功都会调用

            .4 对象方法
             Promise.all()  并发处理多个异步任务，所有任务处理完才能得到结果
             Promise.race() ~，只要一个处理完就能得到结果

    
        18. fetch
          基于promise实现
          .1 语法结构  fetch(url).then(fn2).then(fn3)....catch(fn)

          .2 需要调用两次then来获取真实数据
           第一次 利用data.text() 拿到数据，但是它返回的是promise对象，所以需要第二次.then 来拿到真实data

          .3 参数传递
             配置： ..1 method(String) : GET查询,POST添加,PUT修改,DELETE删除
                    ..2 body(String)： HTTP的请求参数
                    ..3 headers(Object): HTTP的请求头，默认为{}

             fetch('路径',{
                 method:'',
                 body:,     //分为 name=zhagnsan&age=1 和 JSON.stringify({name:'zhagnsan',age:2})
                 headers:{}  //分为application/x-www-form-urlencoded 和 application/json 的Content-Type属性
             }).then(data=> data.text()).then(data=>data)

             传递（12-02）
              在后台：(注意 导入body-parser模块 app.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: false }))

               .1 运用restful风格 路径/path/:id ,拿路径中参数:req.params.id 拿传入的参数：req.body.username
               .2 普通url传参 拿传入的参数 req.query.username
               .3 post 拿参数 req.body.username 
            
            .4 fetch响应结果（12-02）
                text(): 返回数据处理成字符串类型
                json(): 返回结果和 JSON.parse(responseText)一样


        19. axios!!!!!

            .1 特征：
                ..1  支持浏览器和node.js
                ..2  基于promise实现
                ..3  能拦截请求和响应
                ..4  自动转换JSON数据

            .2 基本用法
              axios.get('/adata').then(ret=>{console.log(ret.data)})
              注意获取数据！是 ret.data data属性是固定的，用于获取实际数据

            .3 常用API 
               get查询，post添加，put修改，delete修改   (都可用restful形式) 

            .4 参数传递！！！！！  (15-02)!!
                注意：get和delete相似  (url,restful,params选项参数三种方式)
                      post和put相似    (选项传递参数 application/json默认 与 application/x-www-form-urlencoded)
                                           
                    post和put默认是以json数据格式传递的，如果要用字符串拼接的格式要做出设置
                      var params = new URLSearchParams();
                        params.append("username", "tanghao");
                        params.append("age", 21);
                        //   console.log(params);
                        axios.post("/axios", params).then((ret) => {
                        console.log(ret.data);
                        });             

            .5 响应结果的主要属性
                data: 实际响应回来的数据
                headers: 响应头信息  obj
                status： 响应状态信息
                statusText：响应状态信息

              注意：后台用了res.json ({name:'ada'})来返回值，前端的ret.data就是一个json格式的了

            .6 全局配置
                ..1 axios.default.timeout=3000 //超时时间
                ..2 axios.default.baseURL='http://localhost:3000/Vue基础知识'  //默认地址
                ..3 axios.default.headersp['自定义名称']='...'//设置请求头 做登陆时用

            .7 axios拦截器！！！！
               .1 请求拦截器  （在请求发出之前设置一些信息）
                  axios.interceptors.request.use(function(config){
                      return config;
                  },function(err){
                      //处理响应的错误信息
                  })s

                .2 响应拦截器
                   axios.interceptors.response.use(function(res){
                      return res;
                  },function(err){
                      //处理响应的错误信息
                  })

            20. async/await 
              .1 基本用法（16-01）
               async/await ES7引入的新语法，方便异步操作
               async关键字用于函数上(返回值是Promise实例对象！！！)
               await关键字用于async函数中(await可以得到异步的结果)  await后面要跟一个promise实例对象

                由于返回的是一个promise对象，所以要拿到真实的值，需要调用.then(data=>data) 来拿到
             
              .2 处理多个异步请求(16-02)
                次序await，保证执行顺序。
            

（2020-12-4）
Vue前端路由  Vue-Router
            .1 路由概念
            .2 基本使用步骤
            .3 嵌套路由使用步骤
            .4 动态路由匹配用法
            .5 命名路由用法
            .6 编程式导航用法

         21. 路由概念
            路由本质：对应关系
            .1 后端路由： 根据不同的用户的URL请求，返回不同的内容
                        本质： URL请求地址与服务器资源之间的对应关系

            .2  前端路由： 根据不同的 用户事件，显示不同的页面内容
                        本质： 用户事件与用户处理函数之间的对应关系
            Ajax前端渲染，能够提高性能（后端渲染，存在性能问题），但是不支持浏览器的前进后退操作。
            SPA： Single Page Application：单页面应用程序，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作。
                 实现原理：基于URL地址的hash（hash变化会导致浏览器记录访问历史的变化，但是hash的变化不会触发新的URL请求）
                 实现SPA： 核心技术点 前端路由

            .3 基于URL中的hash变化控制组件的切换(模拟路由-17)
                通过事件： window.onhashchange
                访问hash值：location.hash

        22. Vue Router 
           :不用自己去模拟路由了(17)
            .1 包含功能
                ..1 支持html5历史模式或hash模式
                ..2 支持嵌套路由
                ..3 支持路由参数
                ..4 支持编程式路由
                ..5 支持命名路由

            .2 路由使用 步骤： （略复杂版本 18-01 简易版本18-02）
                ..1 引入库文件  ：
                    先引入vue 再引入vue-router

                ..2 添加路由连接:
                    使用router-link  组件导航 传入to属性指定链接，to属性的值默认会被渲染为#开头的hash地址
                    router-link被默认渲染成一个a标签 
                    tag 可设置渲染成哪种标签 同样也会监听点击 
                    event 声明触发导航的事件 
                    关于属性 replace 和append ；replace回调与router.replace 而不是router.push() ,导航后不会留下history记录。
                    append 在当前相对路径添加其路径 例如从/a到相对路径b 没有配置append路径为/b，配置后路径为/a/b
                    exact-active-class: 精确匹配链接才激活对应class 比如/a  而active-class为模糊匹配 /a/b也能激活对应class.

                ..3 添加路由填充位： 
                    <router-view></router-view> 未来通过路由规则匹配到的组件将会被渲染到router-view所在的位置
                
                ..4 定义路由组件 
                    const User={template:`<h1>user</h1>`}

                ..5 配置路由规则并创建路由实例
                    ！！！注意 规则单词式 routes！！！ 路由时router！！！ 不一样！！
                    const routes = [
                    //路由规则 每个路由都应该映射一个组件 ：至少包含path 和 component属性
                    //path: 表示当前路由规则匹配的hash地址！ component： 当前路由规则对应要展示的组件
                    { path: "/user", component:User },
                    ];

                ..6 把路由挂载到Vue根实例中 
                    vm实例中添加  router


        23. 路由重定向 (18-02)
             重定向： 用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。
             通过路由规则的redirect属性，指定一个新的路由地址，方便设置路由的重定向
             { path: "/", redirect: "/user" },


        24. 嵌套路由(18-03)
             ·点击父路由连接显示模板内容
             ·模板内又有子级路由链接
             ·点击子级路由链接显示子集模板内容

             父级路由通过children属性配置子集路由

        25. 动态路由匹配
            .1 通过路由参数的模式进行路由匹配(18-04)
              { path: "/user/:id", component:User },
              路由组件中通过 $route.params获取路由参数

            .2 路由组件传递参数(18-05)
             $route与对应路由形成高度耦合，不灵活，所以使用props将组件和路由解耦

             ..1 props的值为布尔类型
              routes:[
                  {path: "/user/:id", redirect: "/user" , props:true }
              ]

                const User={
                    props:['id'] ,//使用props接收路由参数
                    template：'<div>{{id}}</div>' //使用路由接收参数
                }
        
             ..2但是当props传递的是一个对象
                 在组件模板中就不能访问到id了
                {path: "/user/:id", redirect: "/user" , props:{uname:'zhangsan',age:12} }

                const User={
                    props:['uname','age'] ,//使用props接收路由参数
                    template：'<div>{{uname ++++  age}}</div>' //使用路由接收参数
                }
            
             ..3 props的值为函数类型
                这个函数接收自己route对象为自己的形参
                {path: "/user/:id", redirect: "/user" , 
                props: route => ({uname:'zhangsan',age:12, id: route.params.id} })

                const User={
                    props:['uname','age','id'] 
                }

        26. 命名路由
            为了更方便的表示路由的路径，给路由规则起别名，为"命名路由"
            {path: "/user/:id", redirect: "/user" ,   ！name:'user'！ }
            通过命名路由实现页面的跳转 (!!!注意前面要to前面要加:!!)
            <router-link :to="{name:'user',params:{id:123}}">User</route-link>

        27. 编程式导航
           .1 页面导航两种方式
               ..1 声明式导航 ： 通过 点击链接 实现导航的方式
                                eg： <a></a>  <router-link></router-link>

               ..2 编程式导航 ： 通过 调用js形式的API实现导航的方式
                                eg： 普通网页中 location.href

            .2 常用 编程式导航API： 
                 this.$router.push('hash地址')  //跳转到指定组件页面
                 this.$router.go(n)             //在历史记录中向前/后n个

                 !! router.push()方法的参数规则
                  ..1 字符串（路径名）
                    routre.push('/register')
                
                  ..2 对象
                    router.push({path:'/home'})

                  ..3 命名路由
                    router.push({name:'user',params:{userId:123}})

                  ..4 带查询参数，变成 /register?uname=lisi
                    router.push({path:'/register',query:{uname:'lisi'}})