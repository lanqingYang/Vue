(2020-11-25)
    1. 概述
        .1 vue是js框架
        .2 简化Dom操作
        .3 响应式数据驱动

    2.  el:挂载点 
        .1 Vue会管理el选项命中的元素机器 内部的 后代元素
        .2 body和html元素不可被挂载
        .3 最好使用id选择器，其他选择器也可以
        .4 el用来设置Vue实例管理(挂载)的元素

本地应用(实例：01、02、03)
    3. vue指令
        v-lock指令: 
        .1 提供样式 [v-cloak]{display :none}
        .2 在插值表达式所在的标签中添加v-vloak指令

        v-pre 
        v-once

        原理:先通过样式隐藏内容,然后再在内存中进行值的替换,替换好之后再显示最终结果(就不会出现刷新会显示{{}} 的情况) 

        (01计数器)
        v-text： 设置标签的内容，默认写法会替换全部内容，使用插值表达式{{}}可以替换指定内容，内部支持写表达式
        v-html： 设置元素的innerHTML，可以解析data中的html结构的内容，其他同v-text
        v-on：   为元素绑定事件 v-on:事件名='方法'  简便：@事件名   
             v-on:click  == @click
             补充：传递自定义参数，事件修饰符  @keyup.enter='sayHi(name)' //按下回车触发函数
    
        (02图片切换)
        v-show: 根据表达值的真假，切换元素的显示和隐藏，本质是切换元素的display，指令后的内容最终解析为布尔值
        v-if: 基本同v-show，区别: 操纵dom树，移除或添加dom树，v-show消耗性能更小
        v-bind： 设置元素属性(src,title,class...) 简写 :class、:title...

        (03记事本)
        v-for: 根据数据生成列表结构，常与数组结合使用，语法(item,index) in 数据（arr）,长度的更新是响应式的
        v-model: 双向数据绑定（获取和设置表单元素的值） 改变v-model='message' ,文本改变 data中的message值改变，data中的message值改变，v-model绑定值也改变
            绑定的数据会和表单元素值相关联


        样式绑定相关语法细节:(07)
          .1对象绑定和数组绑定可以结合使用
          .2class绑定的值可以简化操作
          .3默认的class如何处理? 会保留

Vue网络应用 axios+vue
    4. axios 网络请求库
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    语法规则:
     .1 get:
        axios.get('/user?ID=12345')
        .then(function (response) {
            console.log(response);
        })
        .catch(function (error) {
            console.log(error);
        });

    或者.then(func(data){},func(err){}) //第一个回调函数是成功触发,第二个失败触发

        上面的请求也可以这样做
        axios.get('/user', {
            params: {
            ID: 12345
            }
        })
        ...(下面相同)

    .2 post:
        axios.post('/user', {
            firstName: 'Fred',
            lastName: 'Flintstone'
            })
        ...(下面相同)

    .3 多个并发
        axios.all([getUserAccount(), getUserPermissions()])
            .then(axios.spread(function (acct, perms) {
            // 两个请求现在都执行完成
        }));

    .4 通过向 axios 传递相关配置来创建请求
        // 发送 POST 请求
            axios({
                method: 'post',
                url: '/user/12345',
                data: {
                    firstName: 'Fred',
                    lastName: 'Flintstone'
                    }
            });     

    .5注意事项:
     利用post,传参,是传递的json格式,在服务器中需要导入(body-parse模块)设置
     app.use(bodyParser.json()),才能在req.boyd中拿到值

       使用bodyParser.urlencoded({ extended: false }),使node后台支持了第一种请求体. application/x-www-form-urlencoded : name=zhagnsan&age=20
       使用bodyParser.json(),使node后台支持了第二种请求体.application/json         :{name:'zhagnsan',age=20}
       !! (内部实现机制: 对所有请求调用bodyParser.urlencoded({ extended:false })对请求进行处理,
        // ps:  extended:false false,表示利用queryString系统模块对参数的值进行处理;
        //  true用另一个第三方模块QS来处理参数(更强大,但目前可以不用)
        //   ..1检测当前请求中是否包含了请求参数,包含则接收,并将请求参数转换成对象类型
        //   ..2为req这个参数添加一个body属性,将请求参数的值赋给了req.body属性

Vue常用特性
    5. 表单操作 v-model (03)
        表单域修饰符: number:转换为数值.
                     trim:去掉空格(两端的)
                     lazy: 将input事件转换为change事件

    6. 自定义指令 directive/directives (04!!)
        //注意增加的指令名字可以首字母大写，但是其他字母不能大写!!
       ` 全局定义: Vue.directive('focus',{
                        inserted:function(el){
                            //获取元素的焦点
                            el.focus()
                        }
                    })
            在标签中使用 v-focus
        当然也支持局部定义 具体看09-01的例子
        `带参数的自定义指令 
              v-simple="{color:'green',text:'没有钩子函数的小练习,利用bingding对象的value值获取文本和更改颜色'}"

    .3计算属性(05) computed
       与方法的区别: 计算属性是基于他们的依赖进行缓存的,方法不存在缓存

(2020-11-30)
    7. 过滤器 filter(07)
        格式化数据,比如将字符串格式转化为首字符大写,将日期格式化为指定格式等
        注意:
            全局:Vue.filter('过滤器名称',function(val){//处理逻辑})
            局部:
                filters: {
                //名称，规则(实现逻辑)
                upper1: function (val) {
                return val.charAt(0).toUpperCase() + val.slice(1);
                },
            },
            }


        使用: (插值表达式\属性绑定)
            <div>{{msg | upper1}}</div>
            <div>{{msg | upper | lower}}</div>
            <div :abc="msg| upper">></div>

            可以带参数: <div>格式化后的时间{{date| format('yyyy-MM-dd')}}</div>
            在处理逻辑中:function(val,arg1,arg2..) 'yyyy-MM-dd'对应arg1参数


    8. 侦听器(06) watch
        数据变化时,执行异步或开销较大的操作使用
        数据一旦发生变化,就执行侦听器所绑定的方法

    9. 生命周期
      .1 挂载(初始化相关属性)
            ..1 beforeCreate 数据观测和事件配置前
            ..2 created ! 在实例创建完后被立即调用
            ..3 beforeMount 挂载前
            ..4 mounted !! 
                一旦被触发,就代表初始化完成,页面中模板的内容就已经存在了,就可以向里面填充数据.
                (才能向{{message}}中填充数据)

      .2 更新(元素或组件的更变操作)
            ..1 beforeUpdate 更新时,,发生在虚拟DOM打补丁前
            ..2 updated        由于数据更改导致的虚拟DOM重新渲染打补丁,在这之后调用

      .3 销毁(销毁相关属性)
            ..1 beforeDestroy 销毁前
            ..2 destroyed     销毁后

vue中数组
    10. 数组
        变异方法: 改变原始数组
         push,unshift,pop,shift,sort,reverse, splice(开始位置,删除个数)删除
        非变异方法: 不改变原数组 返回一个新数组
         filter,concat,  slice(begin,end)截取

        数组响应式变化:
            通过Vue.set(vm.items,indexOfItem,newValue)  数组名称、索引、要处理的数组的值
            vm.$set(vm.items,indexOfItem,newValue) 
            这俩既可以处理数组的索引，也可以处理对象的属性，并且都是响应式的 作用相同

            用索引的方式修改数据不是响应式的
                 vm.list[1] = "lemon"; //不会进行响应式改变,不能直接改页面值不会刷新（但是后台值会改变）
            响应式:vm.$set(vm.list, 1, "lemon");
            对对象: vm.$set(vm.info, "gender", "female");
                    Vue.set(vm.info, "interst", "sing");


Vue组件化开发\
    目标:
        .1 知道组件化开发的思想
        .2 组件的注册方式
        .3 组件之间的数据交互方式
        .4 组件插槽的用法
        .5 Vue调试工具的用法
        .6 基于组件的方式实现业务功能


    11.组件
        (.1-.4 : 10-01)
        .1 当一个组件被定义， data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。
           如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！
           通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。

        .2 Vue.component('组件名称',{data:function(){return {}},template:``,methods:{}...})
           data必须是一个函数,原因见上

        .3 组件的模板内容必须是单个根元素  (组件模板可以是模板字符串)
            比如一个button.一个div 不能多个. 最外层不能有兄弟关系的标签
            但可以是父子关系
            <div><button></button><button></button><div>
        
        .4 组件命名方式
            `短横线 my-component
            `驼峰   MyComponent  要用到普通标签里面而不是template里面,就必须写成短横线式 <my-component>,规则:首字母小写,单词间-隔开
                                在template中用<MyComponent>没有问题

        .5 局部组件(10-02)
            局部组件只能在注册他的父组件中使用(注意 自定义指令和自定义过滤器也是这样的)

            var ComponentA={data:function(){return { } },template:``}
            (实例对象中vm) components:{'component-a':ComponentA}


    



